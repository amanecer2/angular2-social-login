{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../src/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Observer } from \"rxjs/Observer\";\r\nimport { saveToStorage, loadFromStorage, deleteFromStorage} from \"./storage.utils\";\r\n\r\ndeclare let gapi: any;\r\ndeclare let IN: any;\r\ndeclare let FB: any;\r\n\r\nexport interface IProvider {\r\n    clientId: string;\r\n    apiVersion?: string;\r\n}\r\n\r\nexport interface IProviders {\r\n    [provider: string]: IProvider;\r\n}\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    gauth: any;\r\n    \r\n    login(provider: string): Observable<Object>{\r\n        return Observable.create(\r\n            (observer: Observer<Object>) => {\r\n                switch(provider){\r\n                    case \"google\":\r\n                                    if (typeof(this.gauth) == \"undefined\"){\r\n                                        this.gauth = gapi.auth2.getAuthInstance();\r\n                                    }\r\n                                    if(!this.gauth.isSignedIn.get()){\r\n                                        this.gauth.signIn().then(() => {\r\n                                            saveToStorage('_login_provider', 'google');\r\n                                            observer.next(this._fetchGoogleUserDetails());\r\n                                            observer.complete();\r\n                                        });\r\n                                    }else{\r\n                                        saveToStorage('_login_provider', 'google');\r\n                                        observer.next(this._fetchGoogleUserDetails());\r\n                                        observer.complete();\r\n                                    }\r\n                                    \r\n                                    break;\r\n                    case \"facebook\":\r\n                                    FB.getLoginStatus((response: any) => {\r\n                                        if(response.status === \"connected\"){\r\n                                            FB.api('/me?fields=name,email,picture', (res: any) => {\r\n                                                if(!res || res.error){\r\n                                                    observer.error(res.error);\r\n                                                }else{\r\n                                                    let userDetails = {\r\n                                                        name: res.name, \r\n                                                        email: res.email, \r\n                                                        uid: res.id, \r\n                                                        provider: \"facebook\", \r\n                                                        image: res.picture.data.url,\r\n                                                        token: response.authResponse.accessToken\r\n                                                    }\r\n                                                    saveToStorage('_login_provider', 'facebook');\r\n                                                    observer.next(userDetails);\r\n                                                    observer.complete();\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                        else{\r\n                                            FB.login((response: any) => {\r\n                                                if(response.status === \"connected\"){\r\n                                                    FB.api('/me?fields=name,email,picture', (res: any) => {\r\n                                                        if(!res || res.error){\r\n                                                            observer.error(res.error);\r\n                                                        }else{\r\n                                                            let userDetails = {\r\n                                                                name: res.name, \r\n                                                                email: res.email, \r\n                                                                uid: res.id, \r\n                                                                provider: \"facebook\", \r\n                                                                image: res.picture.data.url,\r\n                                                                token: response.authResponse.accessToken\r\n                                                            }\r\n                                                            saveToStorage('_login_provider', 'facebook');\r\n                                                            observer.next(userDetails);\r\n                                                            observer.complete();\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            }, {scope: 'email', auth_type: \"rerequest\"});\r\n                                        }\r\n                                    });\r\n                                    break;\r\n                    case \"linkedin\":\r\n                                    IN.User.authorize(function(){\r\n                                        IN.API.Raw(\"/people/~:(id,first-name,last-name,email-address,picture-url)\").result(function(res: any){\r\n                                            let userDetails = {name: res.firstName + \" \" + res.lastName, email: res.emailAddress, uid: res.id, provider: \"linkedIN\", image: res.pictureUrl};\r\n                                            saveToStorage('_login_provider', 'linkedin');\r\n                                            observer.next(userDetails);\r\n                                            observer.complete();\r\n                                        });\r\n                                    });\r\n                                    break;\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    logout(): Observable<boolean>{\r\n        let provider = loadFromStorage(\"_login_provider\");\r\n        return Observable.create((observer: any) => {\r\n            switch(provider){\r\n                case \"google\":\r\n                                let gElement = document.getElementById(\"gSignout\");\r\n                                if (typeof(gElement) != 'undefined' && gElement != null)\r\n                                {\r\n                                    gElement.remove();\r\n                                }\r\n                                let d = document, gSignout;\r\n                                let ref: any = d.getElementsByTagName('script')[0];\r\n                                gSignout = d.createElement('script');\r\n                                gSignout.src = \"https://accounts.google.com/Logout\";\r\n                                gSignout.type = \"text/html\";\r\n                                gSignout.id = \"gSignout\";\r\n                                deleteFromStorage('_login_provider');\r\n                                observer.next(true);\r\n                                observer.complete();\r\n                                ref.parentNode.insertBefore(gSignout, ref);\r\n                                break;\r\n                case \"facebook\":\r\n                                FB.logout(function(res: any){\r\n                                    deleteFromStorage('_login_provider');\r\n                                    observer.next(true);\r\n                                    observer.complete();\r\n                                });\r\n                                break;\r\n                case \"linkedin\":\r\n                                IN.User.logout(function(){\r\n                                    deleteFromStorage('_login_provider');\r\n                                    observer.next(true);\r\n                                    observer.complete();\r\n                  \t\t\t\t}, {});\r\n                                break;\r\n            }\r\n        })\r\n    }\r\n\r\n    private _fetchGoogleUserDetails(){\r\n        let currentUser = this.gauth.currentUser.get();\r\n        let profile = currentUser.getBasicProfile();\r\n        let idToken = currentUser.getAuthResponse().id_token;\r\n        let accessToken = currentUser.getAuthResponse().access_token;\r\n        return {\r\n            token: accessToken,\r\n            idToken: idToken,\r\n            uid: profile.getId(),\r\n            name: profile.getName(),\r\n            email: profile.getEmail(),\r\n            image: profile.getImageUrl(),\r\n            provider: \"google\"\r\n        };\r\n    }\r\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}